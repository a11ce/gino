DOALL: outer loop
  Start value: IV start + core ind * chunk size
  Step size: num cores * chunk size * [IV step (should always be 1?) ]
  Cmp: cmpToExclusive (unsigned lt), brancing to exit if not true

DOALL: inner loop
  Start value: 0
  Step size: accumulator step (should always be 1?)
  Composite IV: outer + inner
    Replace all uses
  Cmp:
    1) outer + inner < cmpToExclusive
      Ensure sum instruction is before the cmp
    2) inner < chunk size

Outer loop contains original header PHIs
Inner loop is generated, and either
  1) ensures no other PHIs exist in the original header
  2) generates adjusted PHIs in the inner loop
    Is this necessary? Would these other PHIs break the condition for DOALL?
    Conditions for DOALL:
      one exit block
      all live outs are reducable
      the loop has an IV
      all loop carried dependencies are:
        commutative, contained in a subloop, or clonable
        (reducable, self contained, side effect free)
    So it is possible:
      For some i_ = c, i++ / i--, if you have another IV such as
      j_ = d, j+=s, then convert to j'', j'_ = 0, j'++/j'--, j'' = d + j'
      and then set j'' = d + (j'_ - i_) + i

